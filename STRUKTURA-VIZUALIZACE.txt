================================================================================
                    STANDARDIZOVANÁ STRUKTURA MODULŮ
================================================================================

PŘED (❌ Problematické):
------------------------
src/
├── modules/
│   ├── 030-pronajimatel/
│   │   └── forms/
│   │       └── form.js
│   │           ├── TYPE_SCHEMAS {...}  ← DUPLIKACE 1
│   │           ├── renderForm()
│   │           └── useUnsavedHelper()
│   │
│   ├── 050-najemnik/
│   │   └── forms/
│   │       └── form.js
│   │           ├── TYPE_SCHEMAS {...}  ← DUPLIKACE 2 (stejné jako 1!)
│   │           ├── renderForm()
│   │           └── useUnsavedHelper()
│   │
│   └── 040-nemovitost/
│       └── forms/
│           ├── edit.js      ← PRÁZDNÝ (1 byte)
│           └── detail.js    ← PRÁZDNÝ (1 byte)


PO (✅ Opravené):
-----------------
src/
├── db/
│   └── type-schemas.js      ← 🎯 CENTRÁLNÍ SCHÉMATA
│       ├── SUBJECT_TYPE_SCHEMAS
│       │   ├── osoba
│       │   ├── osvc
│       │   ├── firma
│       │   ├── spolek
│       │   ├── stat
│       │   └── zastupce
│       ├── PROPERTY_SCHEMA
│       ├── getSubjectTypeSchema(type)
│       └── getPropertySchema()
│
├── ui/
│   └── universal-form.js    ← 🎯 UNIVERZÁLNÍ WRAPPER
│       ├── renderUniversalForm()
│       │   ├── ✅ Breadcrumbs (automaticky)
│       │   ├── ✅ Common Actions (automaticky)
│       │   ├── ✅ Attachments (automaticky)
│       │   ├── ✅ History (automaticky)
│       │   ├── ✅ Archive (volitelně)
│       │   └── ✅ Unsaved Warning (automaticky)
│       ├── getModuleIdFromHash()
│       └── navigateToModuleOverview()
│
└── modules/
    ├── 030-pronajimatel/
    │   └── forms/
    │       └── form.js
    │           ├── import { getSubjectTypeSchema } ← používá sdílené
    │           ├── import { renderUniversalForm }  ← používá wrapper
    │           └── 68 řádků (bylo 104)
    │
    ├── 050-najemnik/
    │   └── forms/
    │       └── form.js
    │           ├── import { getSubjectTypeSchema } ← používá sdílené
    │           ├── import { renderUniversalForm }  ← používá wrapper
    │           └── 76 řádků (bylo 107)
    │
    ├── 040-nemovitost/
    │   └── forms/
    │       ├── edit.js
    │       │   ├── import { getPropertySchema }    ← používá sdílené
    │       │   ├── import { renderUniversalForm }  ← používá wrapper
    │       │   └── 64 řádků (bylo 1 byte!)
    │       └── detail.js
    │           ├── import { getPropertySchema }    ← používá sdílené
    │           ├── import { renderUniversalForm }  ← používá wrapper
    │           └── 48 řádků (bylo 1 byte!)
    │
    └── 000-sablona/
        └── forms/
            ├── edit.js      ← 🎓 VZOROVÁ IMPLEMENTACE
            └── detail.js    ← 🎓 VZOROVÁ IMPLEMENTACE


================================================================================
                        JAK FUNGUJE renderUniversalForm()
================================================================================

KROK 1: Definuj schéma
----------------------
const schema = getSubjectTypeSchema('osoba');
// nebo
const schema = [
  { key: 'name', label: 'Název *', type: 'text', required: true },
  { key: 'description', label: 'Popis', type: 'textarea' },
  // ...
];

KROK 2: Zavolej renderUniversalForm()
--------------------------------------
await renderUniversalForm({
  root,                           // kam renderovat
  schema,                         // co renderovat
  initialData: { ... },           // počáteční hodnoty
  breadcrumbs: [ ... ],           // drobečková navigace
  onSave: async (values) => {     // co udělat při uložení
    const { data, error } = await saveToDb(values);
    if (error) {
      toast('Chyba!', 'error');
      return { success: false, error };
    }
    toast('Uloženo!', 'success');
    navigateToModuleOverview('030-pronajimatel');
    return { success: true, data };
  },
  options: {
    entity: 'subject',            // typ entity (pro přílohy/historii)
    entityId: 'abc123',           // ID entity
    showAttachments: true,        // ✅ zobraz tlačítko Přílohy
    showHistory: true,            // ✅ zobraz tlačítko Historie
    showArchive: false,           // ❌ nezobrazuj Archivaci
    readOnly: false,              // false = editovatelný
  }
});

KROK 3: Výsledek
----------------
┌─────────────────────────────────────────────────┐
│ Domů › Modul › Úprava               [Breadcrumbs]│
├─────────────────────────────────────────────────┤
│                                                  │
│  ┌──────────────┐  ┌──────────────┐            │
│  │ Název *      │  │ Popis        │            │
│  │ [__________ ]│  │ [__________ ]│            │
│  └──────────────┘  └──────────────┘            │
│                                                  │
│  ┌──────────────┐                               │
│  │ Stav         │                               │
│  │ [▼ Aktivní  ]│                               │
│  └──────────────┘                               │
│                                                  │
└─────────────────────────────────────────────────┘
             [Uložit] [Zpět] [Přílohy] [Historie]  ← Common Actions


================================================================================
                            VÝHODY NOVÉ STRUKTURY
================================================================================

1. ✅ ŽÁDNÁ DUPLIKACE
   - TYPE_SCHEMAS na jednom místě
   - Renderovací logika na jednom místě
   - Ušetřeno: ~110 řádků duplikovaného kódu

2. ✅ KONZISTENTNÍ UX
   - Všechny formuláře vypadají stejně
   - Všechny formuláře se chovají stejně
   - Uživatel ví, co může čekat

3. ✅ AUTOMATICKÉ FUNKCE
   - Breadcrumbs          → automaticky přidány
   - Common Actions       → automaticky přidány
   - Attachments          → automaticky přidány (pokud entityId)
   - History              → automaticky přidány (pokud entityId)
   - Unsaved Warning      → automaticky přidáno

4. ✅ SNADNÁ ÚDRŽBA
   - Změna na jednom místě → promítne se všude
   - Přidání nové funkce → stačí upravit universal-form.js
   - Oprava bug → opraví se všude najednou

5. ✅ RYCHLÝ VÝVOJ
   - Nový modul za pár minut
   - Zkopíruj template (000-sablona)
   - Uprav schema
   - Hotovo!


================================================================================
                         JAK VYTVOŘIT NOVÝ MODUL
================================================================================

1. Zkopíruj šablonu
   cp -r src/modules/000-sablona src/modules/XXX-muj-modul

2. Uprav module.config.js
   {
     id: 'XXX-muj-modul',
     title: 'Můj modul',
     icon: 'folder',
     ...
   }

3. Uprav forms/edit.js - schéma
   const SCHEMA = [
     { key: 'name', label: 'Název', type: 'text', required: true },
     // ... tvoje pole
   ];

4. Implementuj DB funkce
   async function getData(id) { ... }
   async function saveData(values) { ... }

5. Propoj s formulářem
   onSave: async (values) => {
     const { data, error } = await saveData(values);
     // ...
   }

6. Hotovo!
   ✅ Máš formulář s breadcrumbs
   ✅ Máš common actions (Uložit, Zpět)
   ✅ Máš podporu pro přílohy
   ✅ Máš podporu pro historii
   ✅ Máš unsaved warning


================================================================================
                              SOUBORY K PŘEČTENÍ
================================================================================

📖 STRUKTURA-ODPOVED.md
   → Kompletní odpověď na tvůj dotaz (česky)
   → Co bylo špatně, co je teď opraveno
   → Jak to použít

📖 docs/standardized-module-structure.md
   → Technická dokumentace
   → Kompletní příklady
   → API reference

📖 src/modules/000-sablona/
   → Vzorový modul
   → Ukázkové formuláře
   → Copy-paste ready


================================================================================
